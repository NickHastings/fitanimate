#!/usr/bin/env python3
import argparse
import os
import sys

import fitanimate.plot as fap
import fitanimate.data as fad

import matplotlib.pyplot as plt
plt.rcdefaults()
import matplotlib.animation as animation

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        'infile', metavar='FITFILE', type=argparse.FileType(mode='rb'),
        help='Input .FIT file (Use - for stdin)',
    )
    parser.add_argument(
        '--offset', type=float, default=9.0, help='Time offset (hours)'
    )
    parser.add_argument(
        '--show',    '-s', action='store_true', default=False, help='Show animation'
    )
    parser.add_argument(
        '--num',    '-n', type=int, default=0, help='Only animate th first N frames'
    )
    parser.add_argument(
        '--outfile', '-o', type=str, default=None, help='Output filename'
    )
    parser.add_argument(
        '--format', '-f', type=str, default='4k', help='Output file format. Valid values are 4k or 1080p'
    )
    parser.add_argument(
        '--vertical', '-v', action='store_true', default=False, help='Plot bars Verticaly'
    )
    args = parser.parse_args()

    if args.format == '480p':
        x = 7.20
        y = 4.80
        fontSize=12
    elif args.format == '720p':
        x=12.80
        y=7.20
        fontSize=20
    elif args.format == '1080p':
        x=19.20
        y=10.80
        fontSize=32
    elif args.format == '4k':
        x=38.40
        y=21.60
        fontSize=64
    else:
        print( 'Unkown output format {}'.format(args.format) )
        sys.exit(1)

    plt.rcParams.update({'font.size': fontSize})


    fig = plt.figure(figsize=(x,y))
    gs = fig.add_gridspec( nrows=5, ncols=2)
    a_t   = fig.add_subplot( gs[0:4,0] )
    a_e   = fig.add_subplot( gs[0:1,1] )
    a_m   = fig.add_subplot( gs[2:3,1] )
    
    a_bar = fig.add_subplot( gs[4,0:] )

    fig.patch.set_alpha(0.) # Transparant background

    # See https://adrian.pw/blog/matplotlib-transparent-animation/

    plotVars = []
    plotVars.append( fap.PlotVar('cadence', 'Cadence', 'RPM', 120.0 ) )
    plotVars.append( fap.PlotVar('speed', 'Speed', 'km/h', 80.0, scaleFactor=3.6 ) )
    plotVars.append( fap.PlotVar('power', 'Power',' W', 1000.0))

    if args.vertical:
        plt.subplots_adjust(bottom=0.06, left=0.0, right=1.0, top=1.0)
        plotBar = BarPlot( plotVars, a_bar )
        plotText = TextPlot( a_t, x=0.02 )
    else:
        plt.subplots_adjust(bottom=0.0, left=0.11, right=1.0, top=1.0)
        plotBar = fap.HBarPlot( plotVars, a_bar )
        plotText = fap.TextPlot( a_t, x=-0.24 )

    plots = [plotBar, plotText]

    record_names = ['position_lat', 'position_long' ]
    for plot in plots:
        record_names += plot.ffNames()

    

    # Remove duplicates
    record_names = list(dict.fromkeys(record_names))

    dataGen = fad.DataGen( fad.prePocessData(args.infile, int(args.offset*3600.0), record_names ) )

    ep = fap.ElevationPlot( dataGen.dArr, dataGen.aArr, a_e )
    plots.append(ep)

    mp = fap.MapPlot( dataGen.lonArr, dataGen.latArr, a_m )
    plots.append(mp)

    

    nData = dataGen.dataSet.nFrames()
    if args.num:
        nData = args.num

    # Time interval between frames in msec.
    inter = 1000.0/float(dataGen.dataSet.fps)
    anim=animation.FuncAnimation(fig, fad.run, dataGen, fargs=(fig,tuple(plots),), repeat=False,blit=False,interval=inter,save_count=nData)

    outf = os.path.splitext(os.path.basename(args.infile.name))[0] + '_overlay.mp4'
    if args.outfile:
        outf = args.outfile

    if not args.show:
        anim.save(outf, codec="png", fps=dataGen.dataSet.fps,
                  savefig_kwargs={'transparent': True, 'facecolor': 'none'})

    if args.show:
        plt.show()

if __name__ == '__main__':
    main()
