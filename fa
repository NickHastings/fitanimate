#!/usr/bin/env python3
import argparse
import os
import fitanimate as fa
import matplotlib.pyplot as plt
import matplotlib.animation as animation

def main():            
    parser = argparse.ArgumentParser()
    parser.add_argument(
        'infile', metavar='FITFILE', type=argparse.FileType(mode='rb'),
        help='Input .FIT file (Use - for stdin)',
    )
    parser.add_argument(
        '--offset', type=float, default=9.0, help='Time offset (hours)'
    )
    parser.add_argument(
        '--show',    '-s', action='store_true', default=False, help='Show animation'
    )
    parser.add_argument(
        '--num',    '-n', type=int, default=0, help='Only animate th first N frames'
    )
    parser.add_argument(
        '--outfile', '-o', type=str, default=None, help='Output filename'
    )
    parser.add_argument(
        '--format', '-f', type=str, default='4k', help='Output file format. Valid values are 4k or 1080p'
    )

    args = parser.parse_args()

    # 1920Ã—1080  => 16:9
    # Size here is in inches
    # matplotlib seems to use 100 DPI
    # => 19.20,10.80 for 1080p

    # 4k  3840 x 2160

    # rows,columns grid
    if args.format == '1080p':
        x=19.20
        y=10.80
        fontSize=32
    elif args.format == '4k':
        x=38.40
        y=21.60
        fontSize=64
    else:
        print( 'Unkown output format {}'.format(args.format) )
        sys.exit(1)

    plt.rcParams.update({'font.size': fontSize})

    fig, axes = plt.subplots(3,4,figsize=(x,y))
    [ax.set_axis_off() for ax in axes.ravel()]
    (a_p, a_s, a_c, a_h) = axes[2]
    a_t = axes[0][0]

    # set figure background opacity (alpha) to 0
    fig.patch.set_alpha(0.) # Transparant background

    # See https://adrian.pw/blog/matplotlib-transparent-animation/

    plotPower = fa.BarPlot( 'power', 'Power',' W',  a_p, limit=1000.0)
    plotSpeed = fa.BarPlot( 'speed', 'Speed', 'km/h', a_s, limit= 60.0, scaleFactor=3.6 )
    plotCadence = fa.BarPlot( 'cadence', 'Cadence', 'RPM', a_c, limit = 110.0 )
    plotHR  = fa.BarPlot( 'heart_rate', 'Heart Rate', 'BPM', a_h, limit = 190.0 )
    plotText = fa.TextPlot( a_t )
    plots = (plotPower, plotSpeed, plotCadence, plotHR, plotText)


    record_names = []
    for plot in plots:
        record_names += plot.ffNames()

    dataGen = fa.DataGen( fa.prePocessData(args.infile, int(args.offset*3600.0), record_names ) )

    nData = dataGen.dataSet.nFrames()
    if args.num:
        nData = args.num

    # Time interval between frames in msec.
    inter = 1000.0/float(dataGen.dataSet.fps)
    anim=animation.FuncAnimation(fig, fa.run, dataGen, fargs=(fig,plots,), repeat=False,blit=False,interval=inter,save_count=nData)

    outf = os.path.splitext(os.path.basename(args.infile.name))[0] + '_overlay.mp4'
    if args.outfile:
        outf = args.outfile

    if not args.show:    
        anim.save(outf, codec="png", fps=dataGen.dataSet.fps,
                  savefig_kwargs={'transparent': True, 'facecolor': 'none'})

    if args.show:
        plt.show()

if __name__ == '__main__':
    main()
