#!/usr/bin/env python3
import argparse
import os
import sys

import fitanimate.plot as fap
import fitanimate.data as fad

import matplotlib.pyplot as plt
plt.rcdefaults()
import matplotlib.animation as animation
import matplotlib.gridspec as gridspec

import cartopy.crs as crs

def getFontSize( x, dpi ):
    # For 64 point font for 4k (x=3840,y=2160) @ 100 dpi
    return int(64* x/3840 * 100.0/dpi)

def main():
    videoFormats = {
        '480p': (720,480),
        '720p': (1280,720),
        '1080p': (1920,1080),
        '1440p': (2560,1440),
        '4k' : (3840,2160)
    }

    parser = argparse.ArgumentParser()
    parser.add_argument(
        'infile', metavar='FITFILE', type=argparse.FileType(mode='rb'),
        help='Input .FIT file (Use - for stdin)',
    )
    parser.add_argument(
        '--offset', type=float, default=9.0, help='Time offset (hours)'
    )
    parser.add_argument(
        '--show',    '-s', action='store_true', default=False, help='Show animation'
    )
    parser.add_argument(
        '--num',    '-n', type=int, default=0, help='Only animate th first N frames'
    )
    parser.add_argument(
        '--outfile', '-o', type=str, default=None, help='Output filename'
    )
    parser.add_argument(
        '--format', '-f', type=str, default='4k', choices=videoFormats.keys(),
        help='Output video file format.'
    )
    parser.add_argument(
        '--dpi', '-d', type=int, default=100,
        help='Dots Per Inch. Probably shouldn\'t change'
    )
    parser.add_argument(
        '--text-color', '-t', type=str, default='black',
        help='Text Color'
    )
    parser.add_argument(
        '--vertical', '-v', action='store_true', default=False, help='Plot bars Verticaly'
    )
    args = parser.parse_args()

    x, y = videoFormats[args.format]

    plt.rcParams.update({
        'font.size': getFontSize(x,args.dpi),
        'figure.dpi': args.dpi,
        'text.color': args.text_color,
        'axes.labelcolor': args.text_color,
        'xtick.color': args.text_color,
        'ytick.color': args.text_color
    })

    projection = crs.PlateCarree()
    fig = plt.figure(figsize=(x/args.dpi,y/args.dpi))

    gs_e  = gridspec.GridSpec(1,1)
    gs_e.update( left=0.6, right=1.0, top=1.0, bottom=0.8)
    a_e   = plt.subplot( gs_e[0,0] )

    gs_m  = gridspec.GridSpec(1,1)
    gs_m.update( left=0.6, right=1.0, top=0.8, bottom=0.4)
    a_m   = plt.subplot( gs_m[0,0], projection=projection  )

    gs_b  = gridspec.GridSpec(1,1)
    gs_b.update( left=0.0, right=1.0, top=0.3, bottom=0.0)
    a_bar = plt.subplot( gs_b[0,0] )

    fig.patch.set_alpha(0.) # Transparant background

    # See https://adrian.pw/blog/matplotlib-transparent-animation/

    plotVars = []
    plotVars.append( fap.PlotVar('cadence', 'Cadence', 'RPM', 120.0 ) )
    plotVars.append( fap.PlotVar('speed', 'Speed', 'km/h', 80.0, scaleFactor=3.6 ) )
    plotVars.append( fap.PlotVar('power', 'Power',' W', 1000.0))

    if args.vertical:
        gs_b.update( left=0.0, right=1.0, top=0.3, bottom=0.06)
        plotBar = fap.BarPlot( plotVars, a_bar )
    else:
        gs_b.update( left=0.11, right=1.0, top=0.3, bottom=0.0)
        plotBar = fap.HBarPlot( plotVars, a_bar )

    plots = [plotBar]
    plots.append( fap.RideText( fig ) )

    mp = fap.MapPlot(a_m, projection )
    plots.append(mp)
    ep = fap.ElevationPlot( a_e )
    plots.append(ep)

    record_names = []
    for plot in plots:
        record_names += plot.ffNames

    # Remove duplicates
    record_names = list(dict.fromkeys(record_names))
    dataGen = fad.DataGen( fad.prePocessData(args.infile, record_names , int(args.offset*3600.0) ) )

    mp.DrawBasePlot( dataGen.lonArr, dataGen.latArr )
    ep.DrawBasePlot( dataGen.dArr, dataGen.aArr )

    nData = dataGen.dataSet.nFrames()
    if args.num:
        nData = args.num

    # Time interval between frames in msec.
    inter = 1000.0/float(dataGen.dataSet.fps)
    anim=animation.FuncAnimation(fig, fad.run, dataGen, fargs=(fig,tuple(plots),), repeat=False,blit=False,interval=inter,save_count=nData)

    outf = os.path.splitext(os.path.basename(args.infile.name))[0] + '_overlay.mp4'
    if args.outfile:
        outf = args.outfile

    if not args.show:
        anim.save(outf, codec="png", fps=dataGen.dataSet.fps,
                  savefig_kwargs={'transparent': True, 'facecolor': 'none'})

    if args.show:
        plt.show()

if __name__ == '__main__':
    main()
    
